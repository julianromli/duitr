import React, { useRef, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { ArrowDown, ArrowUp, ArrowLeftRight } from 'lucide-react';
import { useFinance } from '@/context/FinanceContext';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useTheme } from '@/context/ThemeContext';
import html2canvas from 'html2canvas';
import CategoryIcon from '@/components/shared/CategoryIcon';
import {
  Sheet,
  SheetContent,
  SheetPortal,
  SheetOverlay
} from "@/components/ui/sheet";
import * as SheetPrimitive from "@radix-ui/react-dialog";

const TransactionDetailPage: React.FC = () => {
  const { state } = useLocation();
  const { formatCurrency, wallets, getDisplayCategoryName } = useFinance();
  const transaction = state?.transaction;
  const navigate = useNavigate();
  const { toast } = useToast();
  const { t } = useTranslation();
  const contentRef = useRef<HTMLDivElement>(null);
  const [isDownloading, setIsDownloading] = useState(false);
  const [isOpen, setIsOpen] = useState(true);
  const { theme } = useTheme();

  const handleClose = () => {
    setIsOpen(false);
    setTimeout(() => navigate(-1), 300); // Wait for animation to complete
  };

  if (!transaction) {
    return null;
  }

  const { amount, categoryId, description, date, type, walletId } = transaction;

  // Get wallet name by ID
  const getWalletName = (walletId: string) => {
    const wallet = wallets.find(w => w.id === walletId);
    return wallet ? wallet.name : 'Unknown Wallet';
  };

  // Format date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  // Get icon based on transaction type
  const getTypeIcon = () => {
    switch (type) {
      case 'income':
        return <ArrowUp className="w-5 h-5 text-finance-income" />;
      case 'expense':
        return <ArrowDown className="w-5 h-5 text-finance-expense" />;
      case 'transfer':
        return <ArrowLeftRight className="w-5 h-5 text-finance-saving" />;
      default:
        return null;
    }
  };

  // Get color based on transaction type
  const getTypeColor = () => {
    switch (type) {
      case 'income':
        return 'text-finance-income';
      case 'expense':
        return 'text-finance-expense';
      case 'transfer':
        return 'text-finance-saving';
      default:
        return 'text-foreground';
    }
  };

  // Get colors for success icon based on transaction type
  const getSuccessIconColors = () => {
    const bgColor = 'bg-primary';
    const innerBgColor = theme === 'dark' ? 'bg-[#1A4913]' : 'bg-[#106B03]';
    
    return { bgColor, innerBgColor };
  };

  // Download transaction details as JPG
  const handleDownload = async () => {
    if (!contentRef.current) return;

    setIsDownloading(true);
    try {
      // Create a clone of the content to manipulate
      const contentClone = contentRef.current.cloneNode(true) as HTMLElement;
      
      // Style the cloned element for better image output
      contentClone.style.backgroundColor = '#FFFFFF';
      contentClone.style.color = '#000000';
      contentClone.style.padding = '20px';
      contentClone.style.borderRadius = '15px';
      contentClone.style.width = '600px';
      contentClone.style.maxWidth = '600px';
      
      // Find and adjust text colors in the clone
      const coloredElements = contentClone.querySelectorAll('[class*="text-[#"]');
      coloredElements.forEach((element) => {
        (element as HTMLElement).style.color = '#000000';
      });
      
      // Find labels and make them darker for better contrast on white background
      const labelElements = contentClone.querySelectorAll('[class*="text-[#CCCCCC]"]');
      labelElements.forEach((element) => {
        (element as HTMLElement).style.color = '#666666';
      });
      
      // Add footer text
      const footer = document.createElement('div');
      footer.textContent = 'Generated by duitR';
      footer.style.color = '#666666';
      footer.style.fontSize = '10px';
      footer.style.textAlign = 'center';
      footer.style.marginTop = '20px';
      contentClone.appendChild(footer);

      // Put the clone in the document temporarily
      document.body.appendChild(contentClone);
      
      // Use html2canvas to capture the clone
      const canvas = await html2canvas(contentClone, {
        backgroundColor: '#FFFFFF',
        scale: 2, // Higher resolution
      });
      
      // Remove the clone from the document
      document.body.removeChild(contentClone);
      
      // Convert canvas to a data URL and trigger download
      const dataUrl = canvas.toDataURL('image/jpeg', 0.9);
      const link = document.createElement('a');
      link.download = 'transaction-details.jpg';
      link.href = dataUrl;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: 'Success',
        description: 'Invoice downloaded!',
      });
    } catch (error) {
      console.error('Error generating image:', error);
      toast({
        title: 'Error',
        description: 'Failed to download invoice. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const { bgColor, innerBgColor } = getSuccessIconColors();

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetPortal>
        <SheetOverlay className="bg-black/70" onClick={handleClose} />
        <SheetPrimitive.Content
          className="fixed bottom-0 left-0 right-0 z-50 mt-24 p-0 bg-card border-none rounded-t-[30px] max-w-md mx-auto shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom"
          onInteractOutside={handleClose}
          onEscapeKeyDown={handleClose}
        >
          <div className="pt-6 pb-10 px-6">
            {/* Header with title */}
            <div className="flex justify-center mb-4">
              <div className="w-12 h-1 bg-muted rounded-full" />
            </div>
            
            <h2 className="text-foreground text-xl font-bold text-center mb-6">Detail Transaksi</h2>
            
            {/* Main content that will be captured for download */}
            <div ref={contentRef} className="space-y-6">
              {/* Type icon and amount */}
              <div className="flex flex-col items-center mb-4">
                <div className={`rounded-full ${bgColor} w-20 h-20 flex items-center justify-center mb-6`}>
                  <div className={`rounded-full ${innerBgColor} w-16 h-16 flex items-center justify-center`}>
                    {type === 'expense' ? (
                      <ArrowDown className="w-10 h-10 text-white" />
                    ) : type === 'income' ? (
                      <ArrowUp className="w-10 h-10 text-white" />
                    ) : (
                      <ArrowLeftRight className="w-10 h-10 text-white" />
                    )}
                  </div>
                </div>
                
                <span className={`text-3xl font-bold ${getTypeColor()}`}>
                  {formatCurrency(amount)}
                </span>
              </div>
              
              {/* Transaction details card */}
              <Card className="bg-muted border-none rounded-xl p-5 text-card-foreground">
                <div className="space-y-5">
                  {/* Kategori */}
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Kategori</span>
                    <div className="flex items-center gap-2">
                      <CategoryIcon 
                        category={getDisplayCategoryName(transaction)} 
                        size="sm" 
                      />
                      <span className="font-medium">{getDisplayCategoryName(transaction)}</span>
                    </div>
                  </div>
                  
                  {/* Dompet */}
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Dompet</span>
                    <span className="font-medium">{getWalletName(walletId)}</span>
                  </div>
                  
                  {/* Deskripsi */}
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Deskripsi</span>
                    <span className="text-right font-medium">{description || '-'}</span>
                  </div>
                  
                  {/* Tanggal */}
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Tanggal</span>
                    <span className="font-medium">{formatDate(date)}</span>
                  </div>
                  
                  {/* Jenis Transaksi */}
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Jenis Transaksi</span>
                    <div className="flex items-center gap-2">
                      {getTypeIcon()}
                      <span className="font-medium">
                        {type === 'income' ? 'Pemasukan' : 
                         type === 'expense' ? 'Pengeluaran' : 'Transfer'}
                      </span>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
            
            {/* Action Buttons */}
            <div className="mt-8 space-y-3">
              <Button 
                className="w-full bg-primary text-primary-foreground hover:bg-primary/90 font-semibold h-[50px] rounded-full"
                onClick={handleDownload}
                disabled={isDownloading}
                aria-label="Download transaction receipt"
              >
                {isDownloading ? 'Processing...' : 'Download Bukti'}
              </Button>
              
              <Button 
                className="w-full bg-secondary text-secondary-foreground hover:bg-secondary/90 h-[50px] rounded-full"
                onClick={handleClose}
                aria-label="Go back to previous page"
              >
                Kembali
              </Button>
            </div>
          </div>
        </SheetPrimitive.Content>
      </SheetPortal>
    </Sheet>
  );
};

export default TransactionDetailPage; 