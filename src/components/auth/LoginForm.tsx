// Component: LoginForm
// Description: Provides a dialog-based login form.
// Initially generated by AI based on user prompt.

"use client";

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils"; // Assuming cn is needed, adding just in case, though not used in demo
import { useId } from "react";

// Note: This component renders a DialogTrigger and the DialogContent.
// It's designed to be placed where you want the "Sign in" button to appear.
function LoginForm() {
  const id = useId();
  return (
    <Dialog>
      <DialogTrigger asChild>
        {/* Consider customizing this button's appearance/text */}
        <Button variant="outline">Sign in</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[400px]"> {/* Explicit width from demo */}
        <div className="flex flex-col items-center gap-2">
          {/* Replaced placeholder SVG with App Logo */}
          <div
            className="flex size-11 shrink-0 items-center justify-center rounded-full border border-border bg-background"
            aria-hidden="true"
          >
             {/* Ensure duitr-logo.svg is in the public folder */}
            <img src="/duitr-logo.svg" alt="Duitr Logo" className="h-8 w-8" />
          </div>
          <DialogHeader>
            <DialogTitle className="text-center sm:text-center">Welcome back</DialogTitle> {/* Centered as per demo */}
            <DialogDescription className="text-center sm:text-center">
              Enter your credentials to login to your account.
            </DialogDescription>
          </DialogHeader>
        </div>

        {/* Consider wrapping with <Form> from react-hook-form for validation */}
        <form className="space-y-5">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor={`${id}-email`}>Email</Label>
              <Input id={`${id}-email`} placeholder="hi@yourcompany.com" type="email" required />
            </div>
            <div className="space-y-2">
              <Label htmlFor={`${id}-password`}>Password</Label>
              <Input
                id={`${id}-password`}
                placeholder="Enter your password"
                type="password"
                required
              />
            </div>
          </div>
          <div className="flex items-center justify-between gap-2">
            <div className="flex items-center gap-2">
              <Checkbox id={`${id}-remember`} />
              <Label htmlFor={`${id}-remember`} className="text-sm font-normal text-muted-foreground"> {/* Adjusted class from demo */}
                Remember me
              </Label>
            </div>
            {/* Add functionality for password reset */}
            <a href="#" className="text-sm text-primary underline hover:no-underline"> {/* Added text-primary */}
              Forgot password?
            </a>
          </div>
           {/* Add onSubmit handler to the form and change type="submit" */}
          <Button type="button" className="w-full">
            Sign in
          </Button>
        </form>

        <div className="flex items-center gap-3 before:h-px before:flex-1 before:bg-border after:h-px after:flex-1 after:bg-border">
          <span className="text-xs text-muted-foreground">Or</span>
        </div>
        {/* Add onClick handler for Google login */}
        <Button variant="outline" className="w-full"> {/* Added w-full */} 
          Login with Google
        </Button>
      </DialogContent>
    </Dialog>
  );
}

// Exporting as default or named, adjust as per your convention
// Default export is often used for page components
// Named export is common for reusable components
export { LoginForm }; // Using named export as it's a reusable component 